// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        // Step x0
        zx, // zero the x input?
        // Step x1
        nx, // negate the x input?
        // Step y0
        zy, // zero the y input?
        // Step y1
        ny, // negate the y input?
        // Step 2 - func
        f,  // compute (out = x + y) or (out = x & y)?
        // Step 3- no
        no; // negate the out output?
    OUT
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // Step x0
    Mux16(a=x , b=false , sel=zx , out=x0 );

    // Step x1
    Not16(in=x0 , out=notx );
    Mux16(a=x0 , b=notx , sel=nx , out=x1 );

    // Step y0
    Mux16(a=y , b=false , sel=zy , out=y0 );

    // Step y1
    Not16(in=y0 , out=noty );
    Mux16(a=y0 , b=noty , sel=ny , out=y1 );

    // Step 2 - func
    Add16(a =x1 , b =y1 , out=addxy );
    And16(a=x1 , b=y1 , out=andxy );
    Mux16(a=andxy , b=addxy , sel=f , out=step2 );

    // Step 3 - no
    Not16(in=step2 , out=nostep2 );
    Mux16(a=step2 , b=nostep2 , sel=no , out=step3 );

    // Step 4 - process output
    Or16(a=step3 , b=false , out=out );
    // Ng
    And16(a=step3 , b=true , out[0..14]=na, out[15]=ng);
    // Zr
    Or16(a=step3 , b=false , out[0..7]=LSB,out[8..15]=HSB);
    Or8Way(in=LSB , out=LSBzr );
    Or8Way(in=HSB , out=HSBzr );
    Or(a=LSBzr , b=HSBzr , out=notzr );
    Not(in=notzr , out=zr );

}